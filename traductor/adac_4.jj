 options {
   IGNORE_CASE = true;
   COMMON_TOKEN_ACTION = false;
   DEBUG_PARSER = false;
}

PARSER_BEGIN(adac_4)
package traductor;

import lib.symbolTable.SymbolTable;
import lib.symbolTable.*;
import lib.attributes.Attributes;
import lib.symbolTable.exceptions.*;
import lib.errores.*;
import lib.tools.*;
import lib.tools.codeGeneration.*;
import java.util.*;
import java.io.IOException;

public class adac_4 {

   static SymbolTable tabla_simbolos = new SymbolTable();
   static SemanticFunctions SemFunc = new SemanticFunctions();
   static ErrorSemantico ErrorSemantico = new ErrorSemantico();
   static boolean seHaLeidoUnReturn = false;
   //static LinkedList<Symbol.Types> tipo_funcion = new LinkedList<Symbol.Types>();
   //static LinkedList <Boolean> hay_return = new LinkedList<Boolean>();
   static boolean errores_sintactico= false;
   static Generator generador_codigo = new Generator(tabla_simbolos);

    public static void main(String [] args)
  {
    adac_4 parser;
    try
    {
      if (args.length == 0)
      { //entrada desde stdin
        parser = new adac_4(System.in);
        System.out.println("Leyendo de la entrada estandar...");
      }
      else
      { //entrada desde fichero en args[0]
        parser = new adac_4(new java.io.FileInputStream(args [0]));
      }
      parser.programa(); //invoca simbolo inicial de la gramatica
    }
    catch (java.io.FileNotFoundException e) {
      System.err.println("Fichero " + args [0] + " no encontrado.");
    }
    catch (TokenMgrError e)    {
      errorLexico(token);
    }
    catch(ParseException e) {
		//errorSintactico(e);
   }
//  System.out.println(tabla_simbolos.toString());
  if(errores_sintactico || ErrorSemantico. getContadorErrores() != 0)
   System.out.println("ERROR");
  else{
      try{
        generador_codigo.fin();
      }catch(IOException e){
          System.out.println("Ha habido un problema creando el fichero "+ e);
      }
      System.out.println("FIN");
   }
  }

  static void errorLexico(Token t) {
    System.err.println("ERROR LEXICO (" + SimpleCharStream.getBeginLine() +
    ", " + SimpleCharStream.getBeginColumn() + "): simbolo no reconocido: <" +
    SimpleCharStream.GetImage().charAt(adac_4TokenManager.curLexState) + ">");
  }


  static void errorSintactico(ParseException e){
        errores_sintactico=true;
    String msg ="ERROR SINTACTICO (" + e.currentToken.next.beginLine + ", " + e.currentToken.next.beginColumn
     + "): encontrado: <" + e.currentToken.next.image + "> Se esperaba:  ";
     for(int i=0; i< e.expectedTokenSequences.length; i++) {
		msg+="  " + e.tokenImage[e.expectedTokenSequences[i][0]];
     }
    System.err.println(msg);
  }

  static void panic_mode(int kind) {
    Token t = adac_4.getNextToken();
    while (token.kind != kind && token.kind != EOF)
    {
      token = adac_4.getNextToken();
    }
    String error_msg = "PANIC MODE (<" + t.beginLine + ", " +
    t.beginColumn + ">) : ignorando entrada hasta ";
    if (kind == tEND) {
    	error_msg += " [end]";
  	}else {
   		 error_msg += " [;]";
	}
    System.err.println(error_msg);
  }


}
PARSER_END(adac_4)

TOKEN_MGR_DECLS: {

	static void infoLexico(Token t,String nombre) {
	//  System.out.println("("+ t.beginLine+","+t.beginColumn+"): " + nombre +" \""+ t.image+"\"");
	}

}


SKIP :
{
 "--" : COMMENT
|  " "
| "\r"
| "\t"
| "\n"
}

<COMMENT> SKIP : {
  "\n" : DEFAULT
}
<COMMENT> MORE : {
  <~[]>
}

TOKEN : /* Operadores */
{
    <tAND : "and">         {infoLexico(matchedToken,"operador and");}
  | <tOR : "or">     {infoLexico(matchedToken,"operador or");}
  | <tNOT : "not">     {infoLexico(matchedToken,"operador not");}
  | <tMOD : "mod">     {infoLexico(matchedToken,"operador mod");}
  | <tDIV : "div">     {infoLexico(matchedToken,"operador division");}
  | <tMAYOR : ">">     {infoLexico(matchedToken,"operador mayor");}
  | <tMENOR : "<">     {infoLexico(matchedToken,"operador menor");}
  | <tIGUAL : "=">     {infoLexico(matchedToken,"operador igual");}
  | <tMAI : ">=">     {infoLexico(matchedToken,"operador mayor o igual");}
  | <tMEI : "<=">     {infoLexico(matchedToken,"operadormenor o igual");}
  | <tNI : "<>">     {infoLexico(matchedToken,"operador distinto");}
  | <tOPAS : ":=">       {infoLexico(matchedToken,"operador asignacion");}
  | <tSUMA : "+">     {infoLexico(matchedToken,"operador suma");}
  | <tRESTA : "-">     {infoLexico(matchedToken,"operador resta");}
  | <tMUL : "*">     {infoLexico(matchedToken,"operador multiplicacion");}
}

TOKEN : /* Palabras reservadas */
{
<tPROCEDURE : "procedure">      {infoLexico(matchedToken,"procedure");}
    | <tFUNCTION : "function">  {infoLexico(matchedToken,"function");}
    | <tRETURN : "return">      {infoLexico(matchedToken,"return");}
    | <tVAL : "val">            {infoLexico(matchedToken,"valor");}
    | <tREF : "ref">            {infoLexico(matchedToken,"referencia");}
    | <tIS : "is">              {infoLexico(matchedToken,"is");}
    | <tBEGIN : "begin">        {infoLexico(matchedToken,"begin");}
    | <tEND : "end">            {infoLexico(matchedToken,"end");}
    | <tIF : "if">              {infoLexico(matchedToken,"if");}
    | <tTHEN : "then">          {infoLexico(matchedToken,"then");}
    | <tELSE : "else">          {infoLexico(matchedToken,"else");}
    | <tWHILE: "while">        {infoLexico(matchedToken,"while");}
    | <tDO: "do">				{infoLexico(matchedToken,"do");}
    | <tPUT_L : "put_line">     {infoLexico(matchedToken,"put_line");}
    | <tSKIP_L : "skip_line">     {infoLexico(matchedToken,"skip_line");}
    | <tPUT : "put">      {infoLexico(matchedToken,"put");}
    | <tGET : "get">      {infoLexico(matchedToken,"get");}
    | <tINT : "integer">    {infoLexico(matchedToken,"entero");}
    | <tBOOL : "boolean">     {infoLexico(matchedToken,"booleano"); }
    | <tCHAR : "character">   {infoLexico(matchedToken,"caracter");}
    | <tTRUE : "true">      {infoLexico(matchedToken,"true");}
    | <tFALSE : "false">    {infoLexico(matchedToken,"false");}
    | <tINT2CHAR : "int2char">  {infoLexico(matchedToken,"conversion entero-caracter");}
    | <tCHAR2INT : "char2int">  {infoLexico(matchedToken,"conversion caracter-entero");}

}


TOKEN : /*Identificadores*/
{
  <#DIGITO : [ "0"-"9" ]>
|   <#LETRA : [ "a"-"z", "A" -"Z"]>
|   <#BARRA_POR_DELANTE : "_"<LETRA> | "_"<DIGITO>>
                        //[a-z,A-Z]([a-z,A-Z]|_[a-z,A-Z]|_[0-9]|[0-9])*_?|_
|   <tID: <LETRA>(<LETRA> | <BARRA_POR_DELANTE> | <DIGITO>)*("_")? | "_"((<LETRA> | <DIGITO>) (<LETRA> | <BARRA_POR_DELANTE> | <DIGITO>)*("_")?)?>  {infoLexico(matchedToken,"identificador");}


}

TOKEN : /* Valores */
{

   <tVALORENTERO : (<DIGITO>)+>                     {infoLexico(matchedToken,"valor entero");}
|   <tVALORBOOLEANO : ("true"| "false")>        {infoLexico(matchedToken,"valor booleano");}
|   <tVALORCHAR : ("'")~["'"]("'")>        {infoLexico(matchedToken,"valor caracter");}
|   <tVALORCADENA : ("\"")(~["\""])*("\"")>  {infoLexico(matchedToken,"valor cadena");}
}


TOKEN : /*Separadores*/
{
  <tPC : ";">                     {infoLexico(matchedToken,"punto y coma");}
| <tCOMA : ",">                   {infoLexico(matchedToken,"coma");}
| <tAP: "(">                      {infoLexico(matchedToken,"abre parentesis");}
| <tCP: ")">                      {infoLexico(matchedToken,"cierro parentesis");}
| <tAV: "[">                      {infoLexico(matchedToken,"abre corchete");}
| <tCV: "]">                      {infoLexico(matchedToken,"cierro corchete");}
}


/*programa ::= <tPROCEDURE> <tID> <tIS> declaracion_variables declaracion_acciones bloque_sentencias <EOF> */
void programa():
{String tag_main = CGUtils.newLabel(); Symbol.Types tipo_funcion = Symbol.Types.UNDEFINED;}
{
  <tPROCEDURE> <tID> <tIS> {generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.ENP, tag_main);}
  declaracion_variables() declaracion_acciones() {generador_codigo.codigo_maquina.addLabel(tag_main);}
  bloque_sentencias(tipo_funcion) <EOF> {generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.LVP);}
}

/***DECLARACION DE VARIABLES***/
/*declaracion_variables ::= ( declaracion <tPC> )* */
void declaracion_variables():
{}
{
   try {
     ( declaracion() <tPC> )*
 }catch(ParseException e) {
	panic_mode(tPC);
	errorSintactico(e);
 }
}

/*declaracion ::= tipo_variables lista_vars */
void declaracion():
{Symbol.Types tipo_variable;}
{
  try {
  	tipo_variable = tipo_variables() lista_vars(tipo_variable)
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*tipo_variables ::= ( <tINT> | <tCHAR> | <tBOOL> ) */
Symbol.Types tipo_variables():
{}
{
  try {
  	<tINT>
  	{
  	    return(Symbol.Types.INT);
  	}
  	| <tCHAR>
  	{
  	    return(Symbol.Types.CHAR);
  	}
  	| <tBOOL>
  	{
  	    return(Symbol.Types.BOOL);
  	}
	 }catch(ParseException e) {
	errorSintactico(e);
	return Symbol.Types.UNDEFINED;
 }
}
 /*lista_vars := variable ( <tCOMA> variable )* */
 void lista_vars(Symbol.Types tipo_variable):
 {}
 {
   try {
   variable(tipo_variable) ( <tCOMA> variable(tipo_variable) )*
    }catch(ParseException e) {
	errorSintactico(e);
 }
 }

 /*variable := <tID> declaracion_vector*/
 void variable(Symbol.Types tipo_variable):
 {Token t = null; Integer tamanyo_vector = null;}
 {
   try {
   t = <tID> (tamanyo_vector = declaracion_vector())? /*podemos utilizar solo <tAV> <tVALORENTERO> <tCV> */
   {
        try{
            SemFunc.insertar_simbolo_declaracion(tabla_simbolos, t, tipo_variable, tamanyo_vector);
        }catch(AlreadyDefinedSymbolException e){
            ErrorSemantico.deteccion(e, t);
        }
   }
 }catch(ParseException e) {
	errorSintactico(e);
 }
 }

 /*declaracion_vector ::= <tAV> <tVALORENTERO> <tCV> | epsilon */
 int declaracion_vector():
 {Token t;}
 {
   try {
   <tAV> t = <tVALORENTERO> <tCV>
   {
        return(Integer.parseInt(t.image));
   }
  }catch(ParseException e) {
	  errorSintactico(e);
	  return 0;
 }
}

/***DECLARACION DE ACCIONES****/
/*declaracion_acciones ::= ( declaracion_accion )* */
void declaracion_acciones() :
{}
{try {
  (declaracion_accion())*
   }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*declaracion_accion ::= declaracion_funcion | declaracion_proc */
void declaracion_accion() :
{String tag = CGUtils.newLabel();
generador_codigo.codigo_maquina.addLabel(tag);}
{
  try {
  declaracion_funcion(tag) | declaracion_proc(tag)

   }catch(ParseException e) {
	errorSintactico(e);
 }

}

/*declaracion_funcion ::= cabecera_funcion declaracion_variables bloque_sentencias*/
void declaracion_funcion(String tag) :
{String tag2; Symbol.Types return_type = Symbol.Types.UNDEFINED;} //token ya existe en adac, no hay que declararlo
{
	try {
  return_type = cabecera_funcion(tag) declaracion_variables()
  ( {tag2 = CGUtils.newLabel(); generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.JMP, tag2);}
    declaracion_accion()
    {generador_codigo.codigo_maquina.addLabel(tag2);}
  )?
  //{hay_return.push(true);
  //tamanyo_inicial = hay_return.size();
  //}
  bloque_sentencias(return_type)
    {generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.CSF);
    tabla_simbolos.removeBlock();
     //if(hay_return.size() == tamanyo_inicial){
     if(!seHaLeidoUnReturn){
        ErrorSemantico.deteccion("Las funciones tienen que terminar con un return",token);
     }
     seHaLeidoUnReturn = false;
        //hay_return.pop();
        //tipo_funcion.pop();
     //}

    }
   }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*cabecera_funcion ::= <tFUNCTION> tipo_variables <tID> parametros_formales <tIS>*/
Symbol.Types cabecera_funcion(String tag) :
{Token t = null;
ArrayList<Symbol> parametros_formales = new ArrayList<Symbol>();
Symbol.Types tipo_func = Symbol.Types.UNDEFINED;
SymbolFunction simbolo_funcion;}
{
  try {
  <tFUNCTION> tipo_func = tipo_variables() t = <tID>
    {   //tipo_funcion.push(tipo_func);
        simbolo_funcion = new SymbolFunction(t.image, parametros_formales, tipo_func, tag);
        if(simbolo_funcion != null){
            tabla_simbolos.insertSymbol(simbolo_funcion);
            tabla_simbolos.insertBlock();
        }

    }
  parametros_formales(simbolo_funcion) <tIS>
  {
    generador_codigo.asignar_parametros(parametros_formales);

  }
   }catch(ParseException e) {
	errorSintactico(e);
   }catch(AlreadyDefinedSymbolException e){
    ErrorSemantico.deteccion(e, t);
   }finally{return(tipo_func);}
}

/*declaracion_proc ::= cabecera_proc declaracion_variables bloque_sentencias*/
void declaracion_proc(String tag) :
{String tag2; Symbol.Types return_type = Symbol.Types.UNDEFINED;}
{ try{
  cabecera_proc(tag) declaracion_variables()
  (
    {tag2 = CGUtils.newLabel(); generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.JMP, tag2);}
    declaracion_accion()
    {generador_codigo.codigo_maquina.addLabel(tag2);}
  )?
  bloque_sentencias(return_type)
  {generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.CSF);
  tabla_simbolos.removeBlock();}
   }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*cabecera_proc ::= <tPROCEDURE> <tID> parametros_formales <tIS>*/
void cabecera_proc(String tag) :
{Token t = null;
ArrayList<Symbol> parm_list = new ArrayList<Symbol>();
SymbolProcedure simbolo_procedure;}
{ try{
  <tPROCEDURE> t = <tID>
  {simbolo_procedure = new SymbolProcedure(t.image, parm_list, tag);
    if(simbolo_procedure != null){
        tabla_simbolos.insertSymbol(simbolo_procedure);
        tabla_simbolos.insertBlock();
    }
  }
  parametros_formales(simbolo_procedure) <tIS>
    {generador_codigo.asignar_parametros(parm_list);}
   }catch(ParseException e) {
	errorSintactico(e);
   }catch(AlreadyDefinedSymbolException e){
        ErrorSemantico.deteccion(e, t);
   }
}

/*parametros_formales ::= <tAP> ( parametros ( <tPC> parametros )* )? <tCP> */
void parametros_formales(Symbol simbolo_funcion) :
{}
{ try{
  <tAP> (parametros(simbolo_funcion) (<tPC> parametros(simbolo_funcion) )* )? <tCP>
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*parametros ::= clase_parametros tipo_variables lista_parametros   */
void parametros(Symbol simbolo_funcion) :
{Symbol.Types tipo_parametro;
 Symbol.ParameterClass clase_parametro;
}
{ try{
  clase_parametro = clase_parametros() tipo_parametro = tipo_variables()
  lista_parametros(tipo_parametro, clase_parametro, simbolo_funcion)

 }catch(ParseException e) {
	errorSintactico(e);
 }
}

Symbol.ParameterClass clase_parametros() :
{}
{ try{
  <tVAL> {return(Symbol.ParameterClass.VAL);}
| <tREF> {return(Symbol.ParameterClass.REF);}
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*lista_parametros ::= parametro (, parametro)**/
void lista_parametros(Symbol.Types tipo_parametro, Symbol.ParameterClass clase_parametro, Symbol simbolo_funcion) :
{}
{ try{
  parametro(tipo_parametro, clase_parametro, simbolo_funcion)(<tCOMA> parametro(tipo_parametro, clase_parametro, simbolo_funcion) )*
  /* lista_parametrosRec() */
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*parametro := <tID> parametro_vector*/
void parametro(Symbol.Types tipo_parametro, Symbol.ParameterClass clase_parametro, Symbol simbolo_funcion) :
{Token t = null; Integer tamanyo_vector = null; Symbol parametro = null;}
{ try{
  t = <tID> (tamanyo_vector = declaracion_vector())?
  {
        try
        {
            parametro = SemFunc.insertar_parametro(tabla_simbolos, t, tipo_parametro, tamanyo_vector, clase_parametro);
        }catch(AlreadyDefinedSymbolException e){
              ErrorSemantico.deteccion(e, t);
        }
        if(parametro != null)
            SemFunc.insertar_parametro_en_funcion(simbolo_funcion, parametro);
  }
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/***BLOQUE SENTENCIAS**/

/*bloque_sentencias ::= <tBEGIN> lista_sentencias <tEND>*/
void bloque_sentencias(Symbol.Types tipo_funcion) :
{}
{ try{
  <tBEGIN> lista_sentencias(tipo_funcion) <tEND>
   }catch(ParseException e) {
     panic_mode(tEND);
	errorSintactico(e);
 }
}

/*lista_sentencias ::= sentencia**/
void lista_sentencias(Symbol.Types tipo_funcion) :
{}
{ try{
  (sentencia(tipo_funcion))+ //una o mas sentencias
  |  {}
   }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*lista_sentencias ::= sentencia**/
void sentencia(Symbol.Types tipo_funcion) :
{Attributes atr; Token t;}
{
  try {
	  leer() <tPC>
	| skip_linea() <tPC>
	| escribir() <tPC>
	| escribir_linea() <tPC>
	| LOOKAHEAD(2) invocacion_procedimiento()
	| LOOKAHEAD(2) asignacion() <tPC>
	| seleccion(tipo_funcion)
	| mientras_que(tipo_funcion)
	| t=<tRETURN> atr = expresion() <tPC> {
	    if(tipo_funcion != Symbol.Types.UNDEFINED){
	        if(atr.type != tipo_funcion){
	            ErrorSemantico.deteccion("El tipo obtenido no coincide con la declaracion de la funcion",t);
	        }
	        //hay_return.pop();
	        seHaLeidoUnReturn = true;
	    }else{
	        ErrorSemantico.deteccion("La instruccion return solo se puede usar en funciones",t);
	    }
	} //la propia expresion cargará el valor
	}catch(ParseException e) {
	  panic_mode(tPC);
	  errorSintactico(e);
	}
}

void leer() :
{}
{ try{
  <tGET> <tAP> lista_asignables() <tCP>
 }catch(ParseException e) {
	errorSintactico(e);
}
}

/*lista_asignables() := (< tID >) lista_asignablesRec */
void lista_asignables() : //se puede sustituir por variable
{Attributes atr = new Attributes(),atr_v=null; Symbol simbolo_del_factor = null; Token t;}
{ try{
  t= <tID>{
     try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
        atr = new Attributes(simbolo_del_factor);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
        atr.comprobacion_asignable_leer(t);
        generador_codigo.lista_asignables(atr);
  }
   (atr_v=asignable_vector(simbolo_del_factor,t))?
    { SemanticFunctions.comprobacion_no_asignacion_vector(atr_v,simbolo_del_factor,t); atr_v=null;}
   lista_asignablesRec()
   }catch(ParseException e) {
	errorSintactico(e);
 }
}
/*lista_asignablesRec ::= (asignable_vector)* */
void lista_asignablesRec() : //se puede sustituir por variable
{Token t; Attributes atr = new Attributes(), atr_v=null; Symbol simbolo_del_factor = null;}
{ try{
  (<tCOMA> t=<tID>
  {
    try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
        atr = new Attributes(simbolo_del_factor);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
    atr.comprobacion_asignable_leer(t);
    generador_codigo.lista_asignables(atr);
  }
  (atr_v =asignable_vector(simbolo_del_factor,t))?
    { SemanticFunctions.comprobacion_no_asignacion_vector(atr_v,simbolo_del_factor,t); atr_v=null;}
  )*
 }catch(ParseException e) {
	errorSintactico(e);
 }
}
/*asignable_vector ::= <tAV> expresion <tCV> */
Attributes asignable_vector(Symbol sim_v, Token t_v) :
{
 Attributes atr=new Attributes();

 }
{ try{
  <tAV> atr = expresion() <tCV>
  {
    atr.comprobaciones_para_vectores(sim_v,t_v);
  }
 }catch(ParseException e) {
	errorSintactico(e);
 }finally{
  return atr;
 }
}

/*skip_linea ::= <tSKIP_L> <tAP> <tCP>*/
void skip_linea() :
{}
{ try{
  <tSKIP_L> <tAP> <tCP> { generador_codigo.skip_line(); }
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*escribir ::= <tPUT> <tAP> lista_escribibles <tCP>*/
void escribir() :
{}
{ try{
  <tPUT> <tAP> lista_escribibles() <tCP>
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*escribir_linea ::= <tPUT_L> <tAP> lista_escribibles <tCP>*/
void escribir_linea() :
{}
{ try{
  <tPUT_L> <tAP> cero_o_lista_escribibles() <tCP>
  { generador_codigo.put_line();}
  /* Se podria sustituir cero_o_lista_escribibles por (lista_escribibles())* */
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*cero_o_lista_escribibles ::= lista_escribibles() | epsilon */
void cero_o_lista_escribibles() :
{}
{ try{
  lista_escribibles()
	| {}
 }catch(ParseException e) {
	errorSintactico(e);
 }

}

/*lista_escribibles ::=   expresion | <tVALORCHAR> | <tVALORCADENA> */
void lista_escribibles() : //1 o mÃ¡s escribibles
{ Attributes atr = new Attributes(); }

{ try{
  (atr =expresion()){
      atr.comprobacion_escribir(token);
      generador_codigo.lista_escribibles(atr);
  } lista_escribiblesRec()

 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/* lista_escribiblesRec ::= (<tCOMA> (expresion | <tVALORCHAR> | <tVALORCADENA> ) )* */
void lista_escribiblesRec() :
{ Attributes atr = new Attributes(); }
{ try{
  (<tCOMA> atr = expresion(){
    atr.comprobacion_escribir(token);
    generador_codigo.lista_escribibles(atr);
  } )*
   }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*asignacion ::= var_asignacion <tOPAS> expresion*/
void asignacion() :
{Attributes atr_v=null, atr_e=null; Token t;}
{ try{
  atr_v=var_asignacion() t=<tOPAS> atr_e =expresion() { //Se utiliza el token de tOPAS para la info de los errores semanticos
      atr_v.comprobacion_asignacion(atr_e,t);
      generador_codigo.asignacion(atr_v);
  }
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*var_asignacion ::= <tIDENTIFICADOR> var_Vector*/
Attributes var_asignacion() :
{Token t;
Attributes atr;}
{ try{
  t=<tID> atr=var_vector(token) { return atr;}
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*var_vector ::= <tAV> expresion <tCV> | epsilon */
Attributes var_vector(Token t) :
{
 Attributes atr=new Attributes();
 Symbol simbolo_del_factor = null;
    try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
        atr = new Attributes(simbolo_del_factor);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
    }
{ try{
  <tAV> atr=expresion() <tCV>
  { if (atr !=null)  {
      atr.comprobaciones_para_vectores(simbolo_del_factor, t);
      generador_codigo.apila_direccion_vector(simbolo_del_factor);
    return atr;}
    else return new Attributes();
    }
|
  {return atr;} /*epsilon*/
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*invocacion_procedimiento ::= <tID> argumentos <tPC> */
void invocacion_procedimiento() : /*IMPORTANTE TIENE QUE SER PROCEDIMIENTO EN EL SEMANTICO*/
{ Token t;
 Symbol simbolo_proc = null;
 }
{
	  try {
	  	t =<tID>{
	  	 try{
            simbolo_proc = tabla_simbolos.getSymbol(t.image);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
	  	} argumentos(simbolo_proc,t) <tPC>
      {
        if(simbolo_proc != null){
            generador_codigo.codigo_maquina.addOSFInst(tabla_simbolos.direcciones_de_los_bloques.get(tabla_simbolos.level),
            tabla_simbolos.level- simbolo_proc.nivel,((SymbolProcedure) simbolo_proc).tag);
        }
      }
	  }catch(ParseException e) {
		  panic_mode(tPC);
		  errorSintactico(e);
	  }
}
/*argumentos ::= <tAP> ( lista_expresiones )? <tCP> */
void argumentos(Symbol simbolo_proc, Token t) :
{Attributes atr = null;}
{ try{
  <tAP> (atr=lista_uno_o_mas_exps(simbolo_proc,t) )? <tCP>
    {   if(atr == null){
            SemanticFunctions.comprobaciones_para_acciones_sin_parametros(simbolo_proc, t);
        }
    }
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

///*lista_expresiones ::= expresion (<tCOMA> expresion)* */
//void lista_expresiones() :
//{}
//{ try{
//  expresion() (<tCOMA> expresion())*
// }catch(ParseException e) {
//	errorSintactico(e);
// }
//}

/*seleccion ::= <tIF> expresion <tTHEN> lista_sentencias (<tELSE> lista_sentencias)? <tEND>*/
void seleccion(Symbol.Types tipo_funcion) :
{Attributes atr_e=null;
String etiq_FIN,etiq_ELSE; }
{
  try {
	  <tIF> atr_e =expresion() {
	   atr_e.comprobacion_tipo(Symbol.Types.BOOL,token);
	   etiq_ELSE = CGUtils.newLabel();
	   etiq_FIN = CGUtils.newLabel();
	   generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.JMF, etiq_ELSE);
	   }<tTHEN> lista_sentencias(tipo_funcion) {generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.JMP, etiq_FIN);}
	    {generador_codigo.codigo_maquina.addLabel(etiq_ELSE);}
	  (
	    <tELSE> lista_sentencias(tipo_funcion)
	  )?
	  <tEND> {generador_codigo.codigo_maquina.addLabel(etiq_FIN);}
	}catch(ParseException e) {
	  panic_mode(tEND);
	  errorSintactico(e);
	}
}

/*mientras_que ::= <tWHILE> expresion <tDO> lista_sentencias <tEND>*/
void mientras_que(Symbol.Types tipo_funcion) :
{Attributes atr_e=null; String etiq_WHILE, etiq_FIN;}
{
  try {
  	<tWHILE> { etiq_WHILE=  CGUtils.newLabel(); generador_codigo.codigo_maquina.addLabel(etiq_WHILE);}
  	atr_e=expresion() {
  	atr_e.comprobacion_tipo(Symbol.Types.BOOL,token);
  	etiq_FIN=CGUtils.newLabel();
  	generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.JMF, etiq_FIN);


  	} <tDO> lista_sentencias(tipo_funcion){generador_codigo.codigo_maquina.addInst(PCodeInstruction.OpCode.JMP, etiq_WHILE);}
  	<tEND>{generador_codigo.codigo_maquina.addLabel(etiq_FIN);}
  }catch(ParseException e) {
	  panic_mode(tEND);
	  errorSintactico(e);
  }
}

/*expresion := expresion_simple() (operador_relacional() expresion_simple())?*/
Attributes expresion() :
{Attributes atr_e1=null,atr_e2=null; PCodeInstruction.OpCode operador;}
{ try{
  atr_e1=expresion_simple()
  (
    operador = operador_relacional() atr_e2=expresion_simple()
  {
     atr_e1.comprobacion_mismo_tipo(atr_e2,token);
     generador_codigo.escribo_operador(operador);
  })?
   }catch(ParseException e) {
	errorSintactico(e);
 }finally{if(atr_e2 != null)return new Attributes(false);
  else return atr_e1;}
}

/*operador_relacional : <tIGUAL> | <tMENOR> | <tMAYOR> | <tMEI> | <tMAI> | <tNI> */
PCodeInstruction.OpCode operador_relacional() :
{}
{

try{
  <tIGUAL> { return PCodeInstruction.OpCode.EQ;}
| <tMENOR> { return PCodeInstruction.OpCode.LT;}
| <tMAYOR> { return PCodeInstruction.OpCode.GT;}
| <tMEI> { return PCodeInstruction.OpCode.LTE;}
| <tMAI> { return PCodeInstruction.OpCode.GTE;}
| <tNI> { return PCodeInstruction.OpCode.NEQ;}
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/* expresion_simple : ( <tSUMA> | <tRESTA> )? termino ( operador_aditivo termino )* */
Attributes expresion_simple() :
{Attributes atr_f1=null,atr_f2=null;
boolean positivo_negativo = false;
PCodeInstruction.OpCode operador;}
{
  try{
    (<tSUMA> {positivo_negativo = true;} | <tRESTA> {positivo_negativo = true;} )?
    atr_f1=termino() {  if(positivo_negativo) atr_f1.comprobacion_tipo(Symbol.Types.INT,token); }
    (operador = operador_aditivo() atr_f2 =termino()
        {Attributes.comprobacion_tipo(atr_f1,atr_f2,operador == PCodeInstruction.OpCode.OR,token);
         generador_codigo.escribo_operador(operador);
        }
    )*
  }catch(ParseException e) {
	  errorSintactico(e);
  }finally{return atr_f1;}
}

/* operador_aditivo :=  <tSUMA>| <tRESTA>| <tOR>*/
PCodeInstruction.OpCode operador_aditivo() :
{}
{

 try{
  <tSUMA>{return(PCodeInstruction.OpCode.PLUS);}
| <tRESTA>{return(PCodeInstruction.OpCode.SBT);}
| <tOR> {return(PCodeInstruction.OpCode.OR);}
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*termino := factor ( operador_multiplicativo factor )* */
Attributes termino() :
{Attributes atr_f1=null,atr_f2=null;
PCodeInstruction.OpCode operador;}
{
  try{
  atr_f1 =factor() (operador = operador_multiplicativo() atr_f2= factor() {
     Attributes.comprobacion_tipo(atr_f1, atr_f2, operador == PCodeInstruction.OpCode.AND,token);
     generador_codigo.escribo_operador(operador);
  })*
 }catch(ParseException e) {
	errorSintactico(e);
 }finally{ return atr_f1;}
}

/*operador_multiplicativo :=  <tMUL>| <tMOD>| <tDIV>| <tAND>*/
PCodeInstruction.OpCode operador_multiplicativo() :
{}
{
  try{
  <tMUL> {return PCodeInstruction.OpCode.TMS;}
| <tMOD> {return PCodeInstruction.OpCode.MOD;}
| <tDIV> {return PCodeInstruction.OpCode.DIV;}
| <tAND> {return PCodeInstruction.OpCode.AND;}
 }catch(ParseException e) {
	errorSintactico(e);
 }
}

/*factor := <tNOT> factor | <tAP> expresion <tCP> | <tINT2CHAR> <tAP> expresion <tCP> | <tCHAR2INT> <tAP> expresion <tCP>
| <tID> accion_o_vector | <tCONST_INT>| <tCONST_CHAR>| <tCONST_STRING>| <tTRUE>| <tFALSE>*/
Attributes factor() :
{Token t;  Attributes atr_f=null,atr_e; Symbol s=null;}
{
  try{
  <tNOT> atr_f = factor(){
       atr_f.comprobacion_tipo(Symbol.Types.BOOL,token);
  }
| <tAP> atr_f = expresion() <tCP>
| <tINT2CHAR> <tAP> atr_e =expresion() <tCP> {
        if(atr_e.comprobacion_tipo(Symbol.Types.INT,token)){
            generador_codigo.int2char();
            atr_f = new Attributes(' ');
        }
       }
| <tCHAR2INT> <tAP> atr_e=expresion() <tCP> {
        if(atr_e.comprobacion_tipo(Symbol.Types.CHAR,token)){
            atr_f = new Attributes(0);
        }
    }
| t=<tID> atr_f = funcion_o_vector(t) /*llamada a funcion o componente de vector*/
| t= <tVALORENTERO> { atr_f = new Attributes(Integer.parseInt(t.image)); generador_codigo.apila_valor(atr_f);}
| t= <tVALORCHAR>  { atr_f =new Attributes(t.image.charAt(1));generador_codigo.apila_valor(atr_f);}
| t= <tVALORCADENA> { atr_f = new Attributes(t.image); generador_codigo.apila_valor(atr_f);}
| <tTRUE> { atr_f = new Attributes(true);generador_codigo.apila_valor(atr_f);}
| <tFALSE> { atr_f = new Attributes(false);generador_codigo.apila_valor(atr_f);}
 }catch(ParseException e) {
	errorSintactico(e);
 }finally{
    return atr_f;
 }
}

/*funcion_o_vector := <tAP> lista_cero_o_mas_exps <tCP> | <tAV> expresion <tCV> | /*epsilon* */
Attributes funcion_o_vector(Token t) :
{Attributes atr=new Attributes();
 Symbol simbolo_del_factor = null;
    try{
        simbolo_del_factor = tabla_simbolos.getSymbol(t.image);
        if (simbolo_del_factor instanceof SymbolProcedure) ErrorSemantico.deteccion("NO SE PUEDEN ASIGNAR PROCEDIMIENTOS",t);
    }catch(SymbolNotFoundException e){
        ErrorSemantico.deteccion(e, t);
    }
}
{
  try{
  <tAP> {atr=null;}(atr= lista_uno_o_mas_exps(simbolo_del_factor, t) )? <tCP> {
      generador_codigo.codigo_maquina.addOSFInst(tabla_simbolos.direcciones_de_los_bloques.get(tabla_simbolos.level),
      tabla_simbolos.level- simbolo_del_factor.nivel,((SymbolFunction) simbolo_del_factor).tag);
    if(atr==null)
        SemanticFunctions.comprobaciones_para_acciones_sin_parametros(simbolo_del_factor,t);
    atr = new Attributes(); atr.returnType_al_tipo(simbolo_del_factor);

  } |
  <tAV> atr = expresion() <tCV>
  {
    atr.comprobaciones_para_vectores(simbolo_del_factor, t);
    generador_codigo.apila_valor_vector(simbolo_del_factor);
  } | {/*epsilon*/
      atr.asignar_simbolo(simbolo_del_factor);
      generador_codigo.apila_valor_simbolo(simbolo_del_factor);
    }
 }catch(ParseException e) {
	errorSintactico(e);
 }finally{
  return atr;
 }
}

/*lista_uno_o_mas_exps:= expresion() (<tCOMA> expresion())* */
Attributes lista_uno_o_mas_exps(Symbol simbolo_de_la_accion, Token t) :
{Attributes atr=new Attributes();
 int indice_parametro = 0;
 SymbolFunction simbolo_funcion = null;
 SymbolProcedure simbolo_procedimiento = null;
    if(simbolo_de_la_accion instanceof SymbolFunction){
        simbolo_funcion = (SymbolFunction) simbolo_de_la_accion;
    }else if(simbolo_de_la_accion instanceof SymbolProcedure){
        simbolo_procedimiento = (SymbolProcedure) simbolo_de_la_accion;
    }else{
        ErrorSemantico.deteccion("el simbolo encontrado no es ni función ni procedimiento," +
         " y se esta invocando con parametros", t);
    }
}
{
  try{
  atr = expresion()
    { atr.es_parametro_de_accion(simbolo_funcion, simbolo_procedimiento, indice_parametro,t);
    generador_codigo.eliminarDRF(simbolo_funcion, simbolo_procedimiento, indice_parametro);
    indice_parametro++;}
  (<tCOMA> atr = expresion()
   {
    atr.es_parametro_de_accion(simbolo_funcion, simbolo_procedimiento, indice_parametro,t);
    generador_codigo.eliminarDRF(simbolo_funcion, simbolo_procedimiento, indice_parametro);
    indice_parametro++;}
  )*{
     SemanticFunctions.comprobacion_numero_argumentos(simbolo_funcion, simbolo_procedimiento, indice_parametro,t);
  }
 }catch(ParseException e) {
	errorSintactico(e);
 }finally{return atr; }
}

