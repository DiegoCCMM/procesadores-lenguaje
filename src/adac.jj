options
{
  LOOKAHEAD = 1;
  static = true;
  ignore_case = true;
  //debug_parser = true;
}

PARSER_BEGIN(MiLenguaje)

import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;import java.util.ArrayList;
import java.util.Iterator;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
/*import semantico.RegistroExpr;
import semantico.Simbolo;
import semantico.Simbolo.*;
import semantico.SimboloNoEncontradoException;
import semantico.SimboloRepetidoException;
import semantico.Tabla_simbolos;
import gener_cod.GeneradorCodigo;*/

import java.util.ArrayList;
import java.util.ListIterator;
public class MiLenguaje
{
    public enum token {
    		tPROGRAMA,
            tVAR,
            tAND,
            tPARENTESISABIERTO,
            tPARENTESISCERRADO,
            tOR,
            tNOT,
            tPRINCIPIO,
            tFIN,
            tSI,
            tENT,
            tSI_NO,
            tFSI,
            tMQ,
            tFMQ,
            tESCRIBIR,
            tLEER,
            tMOD,
            tENTERO,
            tBOOLEANO,
            tCARACTER,
            tTRUE,
            tFALSE,
            tENTACAR,
            tCARAENT,
            tACCION,
            tVAL,
            tREF,
            tMAYOR,
            tSUMA,
            tRESTA,
            tPRODUCTO,
            tDIVISION,
            tDIV,
            tMENOR,
            tPUNTOYCOMA,
            tCOMA,
            tIGUAL,
            tMAI,
            tMEI,
            tNI,
            tOPAS,
            tCONSTENTERA,
            tCONSTCHAR,
            tCONSTCAD,
            id
    	};

    public static void escribirTodosLosComponentes(Simbolo a, boolean esDesapilado){
        if(esDesapilado){
            int i = 8;
            while(i >= 0){
                int direccion = a.getDir() + i;
                generador.write("\tSRF " + Math.abs((nivel - a.getNivel())) + " " + direccion + "\n");
                generador.write("\tASGI\n");
                i--;
            }
        }else{
            int i = 1;
            while(i < a.getLongitud()){
                int direccion = a.getDir() + i;
                generador.write("\tSRF " + Math.abs((nivel - a.getNivel())) + " " + direccion + "\n");
                generador.write("\tASGI\n");
                i++;
            }
        }
    }

    public static void asignarCadaComponente(Simbolo a, RegistroExpr b){
        int i = 0;
                    while(i < a.getLongitud()){
                        int direccion = a.getDir() + i;
                        int direccion2 = b.getDir() + i;
                        generador.write("\tSRF " + Math.abs((nivel - a.getNivel())) + " " + direccion + "\n");
                        generador.write("\tSRF " + Math.abs((nivel - a.getNivel())) + " " + direccion2 + "\n");
                        generador.write("\tDRF\n");
                        generador.write("\tASG\n");

                        i++;
                    }
    }
    public static void inicializarComponentesValorCentinela(int limiteTamaño){
                generador.write(";Reservamos direccion vector\n");
                int i = 0;
                            while(i < limiteTamaño){
                                int direccion = dir + i;
                                generador.write("\tSRF " + nivel + " " + direccion + "\n");
                                generador.write("\tSTC 32768\n");
                                generador.write("\tASG\n");

                                i++;
                            }
    }
    public static void inicializarVariableIndividual(int nivelVar){
        generador.write(";Reservamos direccion individual\n");
                                  generador.write("\t SRF " + 0 + " " + dir + "\n");
                                  generador.write("\t STC 32768 \n");
                                  generador.write("\t ASG \n");
    }
    public static void escribirTodosLosComponentesDRF(Simbolo a){
            int i = 1;
            while(i < a.getLongitud()){
                int direccion = a.getDir() + i;
                generador.write("\tSRF " + Math.abs((nivel - a.getNivel())) + " " + direccion + "\n");
                generador.write("\tDRF\n");
                i++;
            }
    }


    public static void escribeError(){
        	generador.write("\t STC 69 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 114 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 114 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 111 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 114 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 32 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 101 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 110 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 32 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 114 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 117 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 110 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 116 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 105 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 109 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 101 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 58 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 32 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 97 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 99 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 99 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 101 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 115 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 111 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 32 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 97 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 32 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 118 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 97 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 114 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 105 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 97 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 98 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 108 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 101 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 32 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 110 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 111 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 32 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 105 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 110 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 105 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 99 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 105 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 97 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 108 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 105 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 122 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 97 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 100 \n");
        	generador.write("\t WRT 0 \n");
        	generador.write("\t STC 97 \n");
        	generador.write("\t WRT 0 \n");
    }

    static int nivel = 0;
    static int dir = 3;
    static int limDirNivel = 0;
    static boolean noSePuedeCalcularEnCompi = false;
    static boolean esInvocacionDeFuncion = false;
    static int acciones = 1;
    static TablaSimbolos TablaSimbolos = new TablaSimbolos();
    static boolean asigVect = false;
    static boolean necesarioEtiqueta = false;
    //static ArrayList <token> //TablaLexico = new ArrayList<token>();

    // Generación del código
       static boolean esCorrecto = true;

       static GeneradorCodigo generador;

  public static void main(String args []) throws ParseException
  {

    if(args.length < 1){
        System.out.println("Se necesita un fichero en los argumentos");
    }
    try{
        MiLenguaje parser = new MiLenguaje(new java.io.FileInputStream(args [0]));
        String[] partes = args[0].split(".ml");
        generador = new GeneradorCodigo(partes[0]);
    }catch  (java.io.FileNotFoundException e){
	    System.out.println("El fichero " + args [0] + " no existe.");
	    return;
    }
    try {
    	MiLenguaje.programa();
    }
    catch (Error e) {
        System.out.println("ERROR LÉXICO (<" + SimpleCharStream.getBeginLine() +
        ", " + SimpleCharStream.getBeginColumn() + ">): símbolo no reconocido: <" +
        SimpleCharStream.GetImage().charAt(MiLenguajeTokenManager.curLexState) + ">");
        return;
	}

  }
   	/* ERROR SINTACTICO */
    	private static void error_sintactico(ParseException e, String error) {
    	    esCorrecto = false;
    	    Token t = MiLenguaje.getNextToken();
    	    System.out.println("ERROR SINTÁCTICO (<" + t.beginLine + ", " +
    	        t.beginColumn + ">): <símbolo no reconocido: '" + t.image +
    	        "'> <Se esperaba: " + error + ">");
    	}

    	private static void error_sintactico(ParseException e) {
    	    esCorrecto = false;
    	    Token t = MiLenguaje.getNextToken();
    	    System.out.println("ERROR SINTÁCTICO (<" + t.beginLine + ", " +
    	        t.beginColumn + ">): <símbolo no esperado: '" + t.image +
    	        "'>");
    	}

   	/*error semántico*/
   	    private static void error_semantico(String error) {
   	        esCorrecto = false;
            	    System.out.println("ERROR SEMANTICO (<" + error +
            	        ">");
        }
}

   	/*error semántico*/


PARSER_END(MiLenguaje)


/*********************************
* Sección de patrones y tokens
*********************************/
TOKEN:
{
    <tPROGRAMA : "programa">
    {
        //(tPROGRAMA);
    }

}
TOKEN:
{
    <tVAR : "var">
    {
       //(tVAR);
    }
}
TOKEN:
{
    <tAND : "and">
    {
        //(tAND);
    }


}
TOKEN:
{
    <tPARENTESISABIERTO : "(">
    {
    }
    | <tPARENTESISCERRADO : ")">
    {
    }
}
TOKEN:
{
    <tOR : "or">
    {
        //(tNOT);
    }
}
TOKEN:
{
    <tNOT : "not">
{
//(tNOT);
}
}
TOKEN:
{
    <tPRINCIPIO : "principio">
{
//(tPRINCIPIO);
}
}
TOKEN:
{
    <tFIN : "fin">
{
//(tFIN);
}
}
TOKEN:
{
    <tSI : "si">
{
//(tSI);
}
}
TOKEN:
{
    <tENT : "ent">
{
//(tENT);
}

}
TOKEN:
{
    <tSI_NO : "si_no">
}
TOKEN:
{
    <tFSI : "fsi">
    {
        //(tFSI);
    }

}
TOKEN:
{
    <tMQ : "mq">
    {
        //(tMQ);
    }

}
TOKEN:
{
   <tFMQ : "fmq">
    {
        //(tFMQ);
    }

}
TOKEN:
{
   <tESCRIBIR : "escribir">
    {
        //(tESCRIBIR);
    }

}
TOKEN:
{
   <tLEER : "leer">
    {
        //(tLEER);
    }

}
TOKEN:
{
   <tMOD : "mod">
    {
        //(tMOD);
    }

}
TOKEN:
{
   <tENTERO : "entero">
    {
        //(tENTERO);
    }


}
TOKEN:
{
   <tBOOLEANO : "booleano">
    {
        //(tBOOLEANO);
    }

}
TOKEN:
{
   <tCARACTER : "caracter">
    {
        //(tCARACTER);
    }

}
TOKEN:{
    <tAPERTURACORCHETE : "[">
    |<tCERRADURACORCHETE : "]">
}
TOKEN:
{
   <tTRUE : "true">
    {
        //(tTRUE);
    }

}
TOKEN:
{
   <tFALSE : "false">
{
//(tFALSE);
}

}
TOKEN:
{
   <tENTACAR : "entacar">
{
//(tENTACAR);
}

}
TOKEN:
{
   <tCARAENT : "caraent">
{
//(tCARAENT);
}

}
TOKEN:
{
   <tACCION : "accion">
{
//(tACCION);
}

}
TOKEN:
{
   <tVAL : "val">
{
//(tVAL);
}

}
TOKEN:
{
   <tREF : "ref">
{
//(tREF);
}

}

TOKEN:
{
   <tMAYOR : ">">
{
//(tMAYOR);
}

}
TOKEN:
{
    <tSUMA : "+">
{
//(tSUMA);
}
    |<tRESTA : "-">
{
//(tRESTA);
}
}
TOKEN:
{
    <tPRODUCTO : "*">
{
//(tPRODUCTO);
}
    |<tDIVISION : "/">
{
//(tDIVISION);
}
    |<tDIV : "DIV">
{
//(tDIV);
}
}
TOKEN:
{
   <tMENOR : "<">
{
//(tMENOR);
}

}

TOKEN:
{
    <tPUNTOYCOMA : ";">
{
//(tPUNTOYCOMA);
}
    | <tCOMA : ",">
{
//(tCOMA);
}
}
TOKEN:
{
   <tIGUAL : "=">
{
//(tIGUAL);
}
}
TOKEN:
{
   <tMAI : ">=">
{
//(tMAI);
}

}
TOKEN:
{
   <tMEI : "<=">
{
//(tMEI);
}

}
TOKEN:
{
   <tNI : "<>">
{
//(tNI);
}

}
TOKEN:
{
    <tOPAS : ":=">
{
//(tOPAS);
}

}
TOKEN:{<tCONSTENTERA : (["0"-"9"])+>
 {
 }
        | <tCONSTCHAR :  "\""(~["\""])? "\"">
        {

        }
        | <tCONSTCAD : "\""(~["\""])+ "\"">
{

}
 }
TOKEN:
  {
      < id : ["_","a"-"z","A"-"Z"](["_","a"-"z","A"-"Z","0"-"9"])*(["0"-"9","A"-"Z","a"-"z"])? >
      {
        //(id);
      }
  }
SKIP:
    { " "| "\r" | "\t"| "\n"}

SKIP:
    { "%" : COMMENT
    | "%%" : COMMENT2}

<COMMENT> SKIP : {
    "\n" : DEFAULT
}
<COMMENT2> SKIP : {
    "%%" : DEFAULT
}
<COMMENT> MORE : {
    <~[]>
}

<COMMENT2> MORE : {
    <~[]>
}
/*********************************
* Sección de sintaxis
*********************************/
